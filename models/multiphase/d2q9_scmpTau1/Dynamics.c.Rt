
// 'Lattice Boltzmann model for simulating flows with multiple phases and components' by X. Shan and H. Chen, 1993
// 'Simulation of nonideal gases and liquid-gas phase transitions by the lattice Boltzmann equation' by X. Shan and H. Chen, 1994

// This type of models are also know as pseuodo-potential models.

<?R 
	source("conf.R")
	c_header();
	source("lib/feq.R")
    source("lib/boundary.R")
?>
CudaDeviceFunction float2 Color() {
  float2 ret;
  ret.x = getRho();
  ret.y = 1;
  return ret;
}

CudaDeviceFunction real_t getRho() {
    return rho(0,0);
}


CudaDeviceFunction vector_t getU() {
    vector_t u;
    u.x = Jx(0,0)/rho(0,0);
    u.y = Jy(0,0)/rho(0,0);
    u.z = 0;
    return u;
}

CudaDeviceFunction void Init() {
    Jx = VelocityX;
    Jy = VelocityY;
    rho = Density;
 }


CudaDeviceFunction real_t getPsi(const real_t rho2){
    #define a2 3.852462271644162
    #define b2 0.1304438860971524 * 4.0 
    #define c2 2.785855170470555
    #define t Temperature
    #define Magic Kupershtokh_K
    real_t p;
    
	p =((rho2*(-pow(b2,3)*pow(rho2,3)/64.+b2*b2*rho2*rho2/16.+b2*rho2/4.+1)*t*c2)/pow(1-b2*rho2/4.,3)-a2*rho2*rho2);
	p = Magic*p;
	return sqrt( -p + rho2/(3.) );

}
CudaDeviceFunction void Run() { 


vector_t F[9];
real_t R[9];


real_t Jx_i[9];
real_t Jy_i[9];
real_t rho_i[9];

real_t Phi[5][5];
<?R

    x = c(0,1,-1);
    U = as.matrix(expand.grid(x,x))


    GravitationX = PV("GravitationX")
    GravitationY = PV("GravitationY")
    
    feq = PV(paste("tmp[",1:9-1,"]",sep=""))
    # for (k in seq(-2,2))
    # {
    #     for (q in seq(-2,2))
    #     {
    #        C(PV(paste("Phi[",k+2,"][",q+2,"]",sep="")) , PV(paste("getPsi(rho(",k,",",q,"))")));
    #     }
    # }

    for (k in seq(-2,2))
    {
        for (q in seq(-2,2))
        {
           C(PV(paste("Phi[",k+2,"][",q+2,"]",sep="")) , PV(paste("phi(",k,",",q,")")));
        }
    }   

    for (i in seq(1,9))
    {
        

        R = PV(c(paste("R[",1:9-1,"]",sep="")))
        Rt = PV(c(paste("//R[",1:9-1,"]",sep="")))
        C(Rt , PV(paste("getPsi(rho(",-U[i,1]-U[,1],",",-U[i,2]-U[,2],"))")));
     
        C(R , PV(paste("Phi[",-U[i,1]-U[,1]+2,"][",-U[i,2]-U[,2]+2,"]",sep="")) );

        Force = PV(c(paste("F[",i-1,"].x",sep=""),paste("F[",i-1,"].y",sep="")));
        
        #gs = c(0,1,1,1,1,1/4,1/4,1/4,1/4);
        gs = U[,1]
        sel = U[,1]^2 + U[,2]^2
        
        gs[] = 1
        gs[sel > 1] = 1/4
        gs[sel == 0] = 0
        
        A = PV("Kupershtokh_A")
        C(R[-1] , (R * R * A + R * R[1] * (A*(-2)+1))[-1],float=F)
        C(Force , 0 -(0.666666666666666666)*(R*gs) %*% U)


        #rho_i = PV(paste("rho(",-U[i,1],",",-U[i,2],")"))
        Jx = (PV(paste("Jx(",-U[i,1],",",-U[i,2],")")) + Force[1] ) 
        Jy = (PV(paste("Jy(",-U[i,1],",",-U[i,2],")")) + Force[2] )
        
        C(PV(paste("Jx_i[",i-1,"]")), Jx + GravitationX)
        C(PV(paste("Jy_i[",i-1,"]")), Jy + GravitationY)
        C(PV(paste("rho_i[",i-1,"]")), PV(paste("rho(",-U[i,1],",",-U[i,2],")")))

        J_i = c(PV(paste("Jx_i[",i-1,"]")),PV(paste("Jy_i[",i-1,"]")))
        rho_i = PV(paste("rho_i[",i-1,"]"))
        #J_i = c(Jx + GravitationX,Jy + GravitationY)
        
        EQi = MRT_eq(U, rho_i, J_i, order=3, ortogonal=TRUE);

        feq[i] = EQi$feq[i]
    }

    mpost = feq%*%EQi$mat

    C(PV('rho'), mpost[1])
    C(PV('Jx'), mpost[2])
    C(PV('Jy'), mpost[3])
    C(PV('phi'), PV("getPsi(rho)"))




?>


  if (IamWall)  {
    Jx = 0;
    Jy = 0;
    rho = 1;
  }
}